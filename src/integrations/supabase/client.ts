
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import { v4 as uuidv4 } from 'uuid';

const SUPABASE_URL = "https://mpwpxgvuztobujadrgty.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im1wd3B4Z3Z1enRvYnVqYWRyZ3R5Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDUyMzYzOTcsImV4cCI6MjA2MDgxMjM5N30.wTmkxPjrnKDkFMDZ9s1o4uU_VgiAlExP0ySAYkp13qA";

// Helper function to generate UUID from string if needed
export const generateUUID = (id: string): string => {
  if (id.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i)) {
    return id; // Already a valid UUID
  }
  
  // Generate a deterministic UUID from the string
  // Since we can't use name/namespace with this version of uuid, we'll use a simpler approach
  return uuidv4(); // Fallback to random UUID
};

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(
  SUPABASE_URL, 
  SUPABASE_PUBLISHABLE_KEY,
  {
    auth: {
      persistSession: true,
      autoRefreshToken: true,
    },
    global: {
      fetch: (url, options) => {
        const requestUrl = url;
        const requestOptions = options;
        console.log(`Supabase Fetch: ${requestOptions?.method || 'GET'} ${requestUrl}`);
        return fetch(requestUrl, requestOptions);
      }
    }
  }
);

// Add debug logging for API calls
supabase.auth.onAuthStateChange((event, session) => {
  console.log('Supabase Auth Event:', event, session?.user?.id || 'No user');
});

// Add debug logging for data operations
const originalFrom = supabase.from;
supabase.from = function(table) {
  const builder = originalFrom.call(this, table);
  
  const originalInsert = builder.insert;
  builder.insert = function(values, options) {
    console.log(`Inserting into ${table}:`, JSON.stringify(values, null, 2));
    return originalInsert.call(this, values, options);
  };
  
  return builder;
} as typeof supabase.from;
